// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/emu/keyboard/keyboard.go

// Package mock_keyboard is a generated GoMock package.
package mock_keyboard

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockKeyboard is a mock of Keyboard interface
type MockKeyboard struct {
	ctrl     *gomock.Controller
	recorder *MockKeyboardMockRecorder
}

// MockKeyboardMockRecorder is the mock recorder for MockKeyboard
type MockKeyboardMockRecorder struct {
	mock *MockKeyboard
}

// NewMockKeyboard creates a new mock instance
func NewMockKeyboard(ctrl *gomock.Controller) *MockKeyboard {
	mock := &MockKeyboard{ctrl: ctrl}
	mock.recorder = &MockKeyboardMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKeyboard) EXPECT() *MockKeyboardMockRecorder {
	return m.recorder
}

// IsPressed mocks base method
func (m *MockKeyboard) IsPressed(key uint8) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPressed", key)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsPressed indicates an expected call of IsPressed
func (mr *MockKeyboardMockRecorder) IsPressed(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPressed", reflect.TypeOf((*MockKeyboard)(nil).IsPressed), key)
}

// GetKeyPress mocks base method
func (m *MockKeyboard) GetKeyPress() uint8 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyPress")
	ret0, _ := ret[0].(uint8)
	return ret0
}

// GetKeyPress indicates an expected call of GetKeyPress
func (mr *MockKeyboardMockRecorder) GetKeyPress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyPress", reflect.TypeOf((*MockKeyboard)(nil).GetKeyPress))
}
