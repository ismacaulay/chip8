// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/emu/keyboard/keyboard.go

// Package mock_keyboard is a generated GoMock package.
package mock_keyboard

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockReader is a mock of Reader interface
type MockReader struct {
	ctrl     *gomock.Controller
	recorder *MockReaderMockRecorder
}

// MockReaderMockRecorder is the mock recorder for MockReader
type MockReaderMockRecorder struct {
	mock *MockReader
}

// NewMockReader creates a new mock instance
func NewMockReader(ctrl *gomock.Controller) *MockReader {
	mock := &MockReader{ctrl: ctrl}
	mock.recorder = &MockReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReader) EXPECT() *MockReaderMockRecorder {
	return m.recorder
}

// IsPressed mocks base method
func (m *MockReader) IsPressed(key uint8) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPressed", key)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsPressed indicates an expected call of IsPressed
func (mr *MockReaderMockRecorder) IsPressed(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPressed", reflect.TypeOf((*MockReader)(nil).IsPressed), key)
}

// GetKeyPress mocks base method
func (m *MockReader) GetKeyPress(cb func(uint8)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetKeyPress", cb)
}

// GetKeyPress indicates an expected call of GetKeyPress
func (mr *MockReaderMockRecorder) GetKeyPress(cb interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyPress", reflect.TypeOf((*MockReader)(nil).GetKeyPress), cb)
}
