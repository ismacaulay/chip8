// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/emu/display/display.go

// Package mock_display is a generated GoMock package.
package mock_display

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDisplay is a mock of Display interface
type MockDisplay struct {
	ctrl     *gomock.Controller
	recorder *MockDisplayMockRecorder
}

// MockDisplayMockRecorder is the mock recorder for MockDisplay
type MockDisplayMockRecorder struct {
	mock *MockDisplay
}

// NewMockDisplay creates a new mock instance
func NewMockDisplay(ctrl *gomock.Controller) *MockDisplay {
	mock := &MockDisplay{ctrl: ctrl}
	mock.recorder = &MockDisplayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDisplay) EXPECT() *MockDisplayMockRecorder {
	return m.recorder
}

// Clear mocks base method
func (m *MockDisplay) Clear() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clear")
}

// Clear indicates an expected call of Clear
func (mr *MockDisplayMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockDisplay)(nil).Clear))
}

// DisplaySprites mocks base method
func (m *MockDisplay) DisplaySprites(x, y uint8, data []uint8) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisplaySprites", x, y, data)
	ret0, _ := ret[0].(bool)
	return ret0
}

// DisplaySprites indicates an expected call of DisplaySprites
func (mr *MockDisplayMockRecorder) DisplaySprites(x, y, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisplaySprites", reflect.TypeOf((*MockDisplay)(nil).DisplaySprites), x, y, data)
}
