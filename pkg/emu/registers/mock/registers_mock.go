// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/emu/registers/registers.go

// Package mock_registers is a generated GoMock package.
package mock_registers

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRegisters is a mock of Registers interface
type MockRegisters struct {
	ctrl     *gomock.Controller
	recorder *MockRegistersMockRecorder
}

// MockRegistersMockRecorder is the mock recorder for MockRegisters
type MockRegistersMockRecorder struct {
	mock *MockRegisters
}

// NewMockRegisters creates a new mock instance
func NewMockRegisters(ctrl *gomock.Controller) *MockRegisters {
	mock := &MockRegisters{ctrl: ctrl}
	mock.recorder = &MockRegistersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRegisters) EXPECT() *MockRegistersMockRecorder {
	return m.recorder
}

// SetProgramCounter mocks base method
func (m *MockRegisters) SetProgramCounter(address uint16) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetProgramCounter", address)
}

// SetProgramCounter indicates an expected call of SetProgramCounter
func (mr *MockRegistersMockRecorder) SetProgramCounter(address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProgramCounter", reflect.TypeOf((*MockRegisters)(nil).SetProgramCounter), address)
}

// IncrementProgramCounter mocks base method
func (m *MockRegisters) IncrementProgramCounter(increment int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncrementProgramCounter", increment)
}

// IncrementProgramCounter indicates an expected call of IncrementProgramCounter
func (mr *MockRegistersMockRecorder) IncrementProgramCounter(increment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementProgramCounter", reflect.TypeOf((*MockRegisters)(nil).IncrementProgramCounter), increment)
}

// PushProgramCounter mocks base method
func (m *MockRegisters) PushProgramCounter() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PushProgramCounter")
}

// PushProgramCounter indicates an expected call of PushProgramCounter
func (mr *MockRegistersMockRecorder) PushProgramCounter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushProgramCounter", reflect.TypeOf((*MockRegisters)(nil).PushProgramCounter))
}

// PopProgramCounter mocks base method
func (m *MockRegisters) PopProgramCounter() uint16 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PopProgramCounter")
	ret0, _ := ret[0].(uint16)
	return ret0
}

// PopProgramCounter indicates an expected call of PopProgramCounter
func (mr *MockRegistersMockRecorder) PopProgramCounter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PopProgramCounter", reflect.TypeOf((*MockRegisters)(nil).PopProgramCounter))
}

// GetRegisterValue mocks base method
func (m *MockRegisters) GetRegisterValue(register uint8) uint8 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegisterValue", register)
	ret0, _ := ret[0].(uint8)
	return ret0
}

// GetRegisterValue indicates an expected call of GetRegisterValue
func (mr *MockRegistersMockRecorder) GetRegisterValue(register interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegisterValue", reflect.TypeOf((*MockRegisters)(nil).GetRegisterValue), register)
}

// SetRegisterValue mocks base method
func (m *MockRegisters) SetRegisterValue(register, value uint8) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRegisterValue", register, value)
}

// SetRegisterValue indicates an expected call of SetRegisterValue
func (mr *MockRegistersMockRecorder) SetRegisterValue(register, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRegisterValue", reflect.TypeOf((*MockRegisters)(nil).SetRegisterValue), register, value)
}

// SetRegisterI mocks base method
func (m *MockRegisters) SetRegisterI(value uint16) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRegisterI", value)
}

// SetRegisterI indicates an expected call of SetRegisterI
func (mr *MockRegistersMockRecorder) SetRegisterI(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRegisterI", reflect.TypeOf((*MockRegisters)(nil).SetRegisterI), value)
}

// GetRegisterI mocks base method
func (m *MockRegisters) GetRegisterI() uint16 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegisterI")
	ret0, _ := ret[0].(uint16)
	return ret0
}

// GetRegisterI indicates an expected call of GetRegisterI
func (mr *MockRegistersMockRecorder) GetRegisterI() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegisterI", reflect.TypeOf((*MockRegisters)(nil).GetRegisterI))
}

// SetDelayTimer mocks base method
func (m *MockRegisters) SetDelayTimer(value uint8) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDelayTimer", value)
}

// SetDelayTimer indicates an expected call of SetDelayTimer
func (mr *MockRegistersMockRecorder) SetDelayTimer(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDelayTimer", reflect.TypeOf((*MockRegisters)(nil).SetDelayTimer), value)
}

// GetDelayTimer mocks base method
func (m *MockRegisters) GetDelayTimer() uint8 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDelayTimer")
	ret0, _ := ret[0].(uint8)
	return ret0
}

// GetDelayTimer indicates an expected call of GetDelayTimer
func (mr *MockRegistersMockRecorder) GetDelayTimer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDelayTimer", reflect.TypeOf((*MockRegisters)(nil).GetDelayTimer))
}

// SetSoundTimer mocks base method
func (m *MockRegisters) SetSoundTimer(value uint8) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSoundTimer", value)
}

// SetSoundTimer indicates an expected call of SetSoundTimer
func (mr *MockRegistersMockRecorder) SetSoundTimer(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSoundTimer", reflect.TypeOf((*MockRegisters)(nil).SetSoundTimer), value)
}

// GetSoundTimer mocks base method
func (m *MockRegisters) GetSoundTimer() uint8 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSoundTimer")
	ret0, _ := ret[0].(uint8)
	return ret0
}

// GetSoundTimer indicates an expected call of GetSoundTimer
func (mr *MockRegistersMockRecorder) GetSoundTimer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSoundTimer", reflect.TypeOf((*MockRegisters)(nil).GetSoundTimer))
}
